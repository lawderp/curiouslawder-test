{"ast":null,"code":"// Copyright (c) 2014-2015, hassansin\n//\n//Perl Ref: http://cpansearch.perl.org/src/TIMB/Geo-StreetAddress-US-1.04/US.pm\n\"use strict\";\n\n(function () {\n  var root;\n  root = this;\n  var XRegExp;\n\n  if (typeof require !== \"undefined\") {\n    XRegExp = require('xregexp/src/xregexp.js');\n  } else XRegExp = root.XRegExp;\n\n  var parser = {};\n  var Addr_Match = {};\n  var Directional = {\n    north: \"N\",\n    northeast: \"NE\",\n    east: \"E\",\n    southeast: \"SE\",\n    south: \"S\",\n    southwest: \"SW\",\n    west: \"W\",\n    northwest: \"NW\"\n  };\n  var Street_Type = {\n    allee: \"aly\",\n    alley: \"aly\",\n    ally: \"aly\",\n    anex: \"anx\",\n    annex: \"anx\",\n    annx: \"anx\",\n    arcade: \"arc\",\n    av: \"ave\",\n    aven: \"ave\",\n    avenu: \"ave\",\n    avenue: \"ave\",\n    avn: \"ave\",\n    avnue: \"ave\",\n    bayoo: \"byu\",\n    bayou: \"byu\",\n    beach: \"bch\",\n    bend: \"bnd\",\n    bluf: \"blf\",\n    bluff: \"blf\",\n    bluffs: \"blfs\",\n    bot: \"btm\",\n    bottm: \"btm\",\n    bottom: \"btm\",\n    boul: \"blvd\",\n    boulevard: \"blvd\",\n    boulv: \"blvd\",\n    branch: \"br\",\n    brdge: \"brg\",\n    bridge: \"brg\",\n    brnch: \"br\",\n    brook: \"brk\",\n    brooks: \"brks\",\n    burg: \"bg\",\n    burgs: \"bgs\",\n    bypa: \"byp\",\n    bypas: \"byp\",\n    bypass: \"byp\",\n    byps: \"byp\",\n    camp: \"cp\",\n    canyn: \"cyn\",\n    canyon: \"cyn\",\n    cape: \"cpe\",\n    causeway: \"cswy\",\n    causway: \"cswy\",\n    cen: \"ctr\",\n    cent: \"ctr\",\n    center: \"ctr\",\n    centers: \"ctrs\",\n    centr: \"ctr\",\n    centre: \"ctr\",\n    circ: \"cir\",\n    circl: \"cir\",\n    circle: \"cir\",\n    circles: \"cirs\",\n    ck: \"crk\",\n    cliff: \"clf\",\n    cliffs: \"clfs\",\n    club: \"clb\",\n    cmp: \"cp\",\n    cnter: \"ctr\",\n    cntr: \"ctr\",\n    cnyn: \"cyn\",\n    common: \"cmn\",\n    corner: \"cor\",\n    corners: \"cors\",\n    course: \"crse\",\n    court: \"ct\",\n    courts: \"cts\",\n    cove: \"cv\",\n    coves: \"cvs\",\n    cr: \"crk\",\n    crcl: \"cir\",\n    crcle: \"cir\",\n    crecent: \"cres\",\n    creek: \"crk\",\n    crescent: \"cres\",\n    cresent: \"cres\",\n    crest: \"crst\",\n    crossing: \"xing\",\n    crossroad: \"xrd\",\n    crscnt: \"cres\",\n    crsent: \"cres\",\n    crsnt: \"cres\",\n    crssing: \"xing\",\n    crssng: \"xing\",\n    crt: \"ct\",\n    curve: \"curv\",\n    dale: \"dl\",\n    dam: \"dm\",\n    div: \"dv\",\n    divide: \"dv\",\n    driv: \"dr\",\n    drive: \"dr\",\n    drives: \"drs\",\n    drv: \"dr\",\n    dvd: \"dv\",\n    estate: \"est\",\n    estates: \"ests\",\n    exp: \"expy\",\n    expr: \"expy\",\n    express: \"expy\",\n    expressway: \"expy\",\n    expw: \"expy\",\n    extension: \"ext\",\n    extensions: \"exts\",\n    extn: \"ext\",\n    extnsn: \"ext\",\n    falls: \"fls\",\n    ferry: \"fry\",\n    field: \"fld\",\n    fields: \"flds\",\n    flat: \"flt\",\n    flats: \"flts\",\n    ford: \"frd\",\n    fords: \"frds\",\n    forest: \"frst\",\n    forests: \"frst\",\n    forg: \"frg\",\n    forge: \"frg\",\n    forges: \"frgs\",\n    fork: \"frk\",\n    forks: \"frks\",\n    fort: \"ft\",\n    freeway: \"fwy\",\n    freewy: \"fwy\",\n    frry: \"fry\",\n    frt: \"ft\",\n    frway: \"fwy\",\n    frwy: \"fwy\",\n    garden: \"gdn\",\n    gardens: \"gdns\",\n    gardn: \"gdn\",\n    gateway: \"gtwy\",\n    gatewy: \"gtwy\",\n    gatway: \"gtwy\",\n    glen: \"gln\",\n    glens: \"glns\",\n    grden: \"gdn\",\n    grdn: \"gdn\",\n    grdns: \"gdns\",\n    green: \"grn\",\n    greens: \"grns\",\n    grov: \"grv\",\n    grove: \"grv\",\n    groves: \"grvs\",\n    gtway: \"gtwy\",\n    harb: \"hbr\",\n    harbor: \"hbr\",\n    harbors: \"hbrs\",\n    harbr: \"hbr\",\n    haven: \"hvn\",\n    havn: \"hvn\",\n    height: \"hts\",\n    heights: \"hts\",\n    hgts: \"hts\",\n    highway: \"hwy\",\n    highwy: \"hwy\",\n    hill: \"hl\",\n    hills: \"hls\",\n    hiway: \"hwy\",\n    hiwy: \"hwy\",\n    hllw: \"holw\",\n    hollow: \"holw\",\n    hollows: \"holw\",\n    holws: \"holw\",\n    hrbor: \"hbr\",\n    ht: \"hts\",\n    hway: \"hwy\",\n    inlet: \"inlt\",\n    island: \"is\",\n    islands: \"iss\",\n    isles: \"isle\",\n    islnd: \"is\",\n    islnds: \"iss\",\n    jction: \"jct\",\n    jctn: \"jct\",\n    jctns: \"jcts\",\n    junction: \"jct\",\n    junctions: \"jcts\",\n    junctn: \"jct\",\n    juncton: \"jct\",\n    key: \"ky\",\n    keys: \"kys\",\n    knol: \"knl\",\n    knoll: \"knl\",\n    knolls: \"knls\",\n    la: \"ln\",\n    lake: \"lk\",\n    lakes: \"lks\",\n    landing: \"lndg\",\n    lane: \"ln\",\n    lanes: \"ln\",\n    ldge: \"ldg\",\n    light: \"lgt\",\n    lights: \"lgts\",\n    lndng: \"lndg\",\n    loaf: \"lf\",\n    lock: \"lck\",\n    locks: \"lcks\",\n    lodg: \"ldg\",\n    lodge: \"ldg\",\n    loops: \"loop\",\n    manor: \"mnr\",\n    manors: \"mnrs\",\n    meadow: \"mdw\",\n    meadows: \"mdws\",\n    medows: \"mdws\",\n    mill: \"ml\",\n    mills: \"mls\",\n    mission: \"msn\",\n    missn: \"msn\",\n    mnt: \"mt\",\n    mntain: \"mtn\",\n    mntn: \"mtn\",\n    mntns: \"mtns\",\n    motorway: \"mtwy\",\n    mount: \"mt\",\n    mountain: \"mtn\",\n    mountains: \"mtns\",\n    mountin: \"mtn\",\n    mssn: \"msn\",\n    mtin: \"mtn\",\n    neck: \"nck\",\n    orchard: \"orch\",\n    orchrd: \"orch\",\n    overpass: \"opas\",\n    ovl: \"oval\",\n    parks: \"park\",\n    parkway: \"pkwy\",\n    parkways: \"pkwy\",\n    parkwy: \"pkwy\",\n    passage: \"psge\",\n    paths: \"path\",\n    pikes: \"pike\",\n    pine: \"pne\",\n    pines: \"pnes\",\n    pk: \"park\",\n    pkway: \"pkwy\",\n    pkwys: \"pkwy\",\n    pky: \"pkwy\",\n    place: \"pl\",\n    plain: \"pln\",\n    plaines: \"plns\",\n    plains: \"plns\",\n    plaza: \"plz\",\n    plza: \"plz\",\n    point: \"pt\",\n    points: \"pts\",\n    port: \"prt\",\n    ports: \"prts\",\n    prairie: \"pr\",\n    prarie: \"pr\",\n    prk: \"park\",\n    prr: \"pr\",\n    rad: \"radl\",\n    radial: \"radl\",\n    radiel: \"radl\",\n    ranch: \"rnch\",\n    ranches: \"rnch\",\n    rapid: \"rpd\",\n    rapids: \"rpds\",\n    rdge: \"rdg\",\n    rest: \"rst\",\n    ridge: \"rdg\",\n    ridges: \"rdgs\",\n    river: \"riv\",\n    rivr: \"riv\",\n    rnchs: \"rnch\",\n    road: \"rd\",\n    roads: \"rds\",\n    route: \"rte\",\n    rvr: \"riv\",\n    row: \"row\",\n    shoal: \"shl\",\n    shoals: \"shls\",\n    shoar: \"shr\",\n    shoars: \"shrs\",\n    shore: \"shr\",\n    shores: \"shrs\",\n    skyway: \"skwy\",\n    spng: \"spg\",\n    spngs: \"spgs\",\n    spring: \"spg\",\n    springs: \"spgs\",\n    sprng: \"spg\",\n    sprngs: \"spgs\",\n    spurs: \"spur\",\n    sqr: \"sq\",\n    sqre: \"sq\",\n    sqrs: \"sqs\",\n    squ: \"sq\",\n    square: \"sq\",\n    squares: \"sqs\",\n    station: \"sta\",\n    statn: \"sta\",\n    stn: \"sta\",\n    str: \"st\",\n    strav: \"stra\",\n    strave: \"stra\",\n    straven: \"stra\",\n    stravenue: \"stra\",\n    stravn: \"stra\",\n    stream: \"strm\",\n    street: \"st\",\n    streets: \"sts\",\n    streme: \"strm\",\n    strt: \"st\",\n    strvn: \"stra\",\n    strvnue: \"stra\",\n    sumit: \"smt\",\n    sumitt: \"smt\",\n    summit: \"smt\",\n    terr: \"ter\",\n    terrace: \"ter\",\n    throughway: \"trwy\",\n    tpk: \"tpke\",\n    tr: \"trl\",\n    trace: \"trce\",\n    traces: \"trce\",\n    track: \"trak\",\n    tracks: \"trak\",\n    trafficway: \"trfy\",\n    trail: \"trl\",\n    trails: \"trl\",\n    trk: \"trak\",\n    trks: \"trak\",\n    trls: \"trl\",\n    trnpk: \"tpke\",\n    trpk: \"tpke\",\n    tunel: \"tunl\",\n    tunls: \"tunl\",\n    tunnel: \"tunl\",\n    tunnels: \"tunl\",\n    tunnl: \"tunl\",\n    turnpike: \"tpke\",\n    turnpk: \"tpke\",\n    underpass: \"upas\",\n    union: \"un\",\n    unions: \"uns\",\n    valley: \"vly\",\n    valleys: \"vlys\",\n    vally: \"vly\",\n    vdct: \"via\",\n    viadct: \"via\",\n    viaduct: \"via\",\n    view: \"vw\",\n    views: \"vws\",\n    vill: \"vlg\",\n    villag: \"vlg\",\n    village: \"vlg\",\n    villages: \"vlgs\",\n    ville: \"vl\",\n    villg: \"vlg\",\n    villiage: \"vlg\",\n    vist: \"vis\",\n    vista: \"vis\",\n    vlly: \"vly\",\n    vst: \"vis\",\n    vsta: \"vis\",\n    walks: \"walk\",\n    well: \"wl\",\n    wells: \"wls\",\n    wy: \"way\"\n  };\n  var State_Code = {\n    \"alabama\": \"AL\",\n    \"alaska\": \"AK\",\n    \"american samoa\": \"AS\",\n    \"arizona\": \"AZ\",\n    \"arkansas\": \"AR\",\n    \"california\": \"CA\",\n    \"colorado\": \"CO\",\n    \"connecticut\": \"CT\",\n    \"delaware\": \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    \"florida\": \"FL\",\n    \"georgia\": \"GA\",\n    \"guam\": \"GU\",\n    \"hawaii\": \"HI\",\n    \"idaho\": \"ID\",\n    \"illinois\": \"IL\",\n    \"indiana\": \"IN\",\n    \"iowa\": \"IA\",\n    \"kansas\": \"KS\",\n    \"kentucky\": \"KY\",\n    \"louisiana\": \"LA\",\n    \"maine\": \"ME\",\n    \"marshall islands\": \"MH\",\n    \"maryland\": \"MD\",\n    \"massachusetts\": \"MA\",\n    \"michigan\": \"MI\",\n    \"minnesota\": \"MN\",\n    \"mississippi\": \"MS\",\n    \"missouri\": \"MO\",\n    \"montana\": \"MT\",\n    \"nebraska\": \"NE\",\n    \"nevada\": \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    \"ohio\": \"OH\",\n    \"oklahoma\": \"OK\",\n    \"oregon\": \"OR\",\n    \"palau\": \"PW\",\n    \"pennsylvania\": \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    \"tennessee\": \"TN\",\n    \"texas\": \"TX\",\n    \"utah\": \"UT\",\n    \"vermont\": \"VT\",\n    \"virgin islands\": \"VI\",\n    \"virginia\": \"VA\",\n    \"washington\": \"WA\",\n    \"west virginia\": \"WV\",\n    \"wisconsin\": \"WI\",\n    \"wyoming\": \"WY\"\n  };\n  var Direction_Code;\n  var initialized = false;\n  var Normalize_Map = {\n    prefix: Directional,\n    prefix1: Directional,\n    prefix2: Directional,\n    suffix: Directional,\n    suffix1: Directional,\n    suffix2: Directional,\n    type: Street_Type,\n    type1: Street_Type,\n    type2: Street_Type,\n    state: State_Code\n  };\n\n  function capitalize(s) {\n    return s && s[0].toUpperCase() + s.slice(1);\n  }\n\n  function keys(o) {\n    return Object.keys(o);\n  }\n\n  function values(o) {\n    var v = [];\n    keys(o).forEach(function (k) {\n      v.push(o[k]);\n    });\n    return v;\n  }\n\n  function each(o, fn) {\n    keys(o).forEach(function (k) {\n      fn(o[k], k);\n    });\n  }\n\n  function invert(o) {\n    var o1 = {};\n    keys(o).forEach(function (k) {\n      o1[o[k]] = k;\n    });\n    return o1;\n  }\n\n  function flatten(o) {\n    return keys(o).concat(values(o));\n  }\n\n  function lazyInit() {\n    if (initialized) {\n      return;\n    }\n\n    initialized = true;\n    Direction_Code = invert(Directional);\n    /*\n    var Street_Type_Match = {};\n    each(Street_Type,function(v,k){ Street_Type_Match[v] = XRegExp.escape(v) });\n    each(Street_Type,function(v,k){ Street_Type_Match[v] = Street_Type_Match[v] + \"|\" + XRegExp.escape(k); });\n    each(Street_Type_Match,function(v,k){ Street_Type_Match[k] = new RegExp( '\\\\b(?:' +  Street_Type_Match[k]  + ')\\\\b', 'i') });\n    */\n\n    Addr_Match = {\n      type: flatten(Street_Type).sort().filter(function (v, i, arr) {\n        return arr.indexOf(v) === i;\n      }).join('|'),\n      fraction: '\\\\d+\\\\/\\\\d+',\n      state: '\\\\b(?:' + keys(State_Code).concat(values(State_Code)).map(XRegExp.escape).join('|') + ')\\\\b',\n      direct: values(Directional).sort(function (a, b) {\n        return a.length < b.length;\n      }).reduce(function (prev, curr) {\n        return prev.concat([XRegExp.escape(curr.replace(/\\w/g, '$&.')), curr]);\n      }, keys(Directional)).join('|'),\n      dircode: keys(Direction_Code).join(\"|\"),\n      zip: '(?<zip>\\\\d{5})[- ]?(?<plus4>\\\\d{4})?',\n      corner: '(?:\\\\band\\\\b|\\\\bat\\\\b|&|\\\\@)'\n    };\n    Addr_Match.number = '(?<number>\\\\d+-?\\\\d*)(?=\\\\D)';\n    Addr_Match.street = '                                       \\n\\\n      (?:                                                       \\n\\\n        (?:(?<street_0>' + Addr_Match.direct + ')\\\\W+               \\n\\\n           (?<type_0>' + Addr_Match.type + ')\\\\b                    \\n\\\n        )                                                       \\n\\\n        |                                                       \\n\\\n        (?:(?<prefix_0>' + Addr_Match.direct + ')\\\\W+)?             \\n\\\n        (?:                                                     \\n\\\n          (?<street_1>[^,]*\\\\d)                                 \\n\\\n          (?:[^\\\\w,]*(?<suffix_1>' + Addr_Match.direct + ')\\\\b)     \\n\\\n          |                                                     \\n\\\n          (?<street_2>[^,]+)                                    \\n\\\n          (?:[^\\\\w,]+(?<type_2>' + Addr_Match.type + ')\\\\b)         \\n\\\n          (?:[^\\\\w,]+(?<suffix_2>' + Addr_Match.direct + ')\\\\b)?    \\n\\\n          |                                                     \\n\\\n          (?<street_3>[^,]+?)                                   \\n\\\n          (?:[^\\\\w,]+(?<type_3>' + Addr_Match.type + ')\\\\b)?        \\n\\\n          (?:[^\\\\w,]+(?<suffix_3>' + Addr_Match.direct + ')\\\\b)?    \\n\\\n        )                                                       \\n\\\n      )';\n    Addr_Match.po_box = 'p\\\\W*(?:[om]|ost\\\\ ?office)\\\\W*b(?:ox)?';\n    Addr_Match.sec_unit_type_numbered = '             \\n\\\n      (?<sec_unit_type_1>su?i?te                      \\n\\\n        |' + Addr_Match.po_box + '                        \\n\\\n        |(?:ap|dep)(?:ar)?t(?:me?nt)?                 \\n\\\n        |ro*m                                         \\n\\\n        |flo*r?                                       \\n\\\n        |uni?t                                        \\n\\\n        |bu?i?ldi?n?g                                 \\n\\\n        |ha?nga?r                                     \\n\\\n        |lo?t                                         \\n\\\n        |pier                                         \\n\\\n        |slip                                         \\n\\\n        |spa?ce?                                      \\n\\\n        |stop                                         \\n\\\n        |tra?i?le?r                                   \\n\\\n        |box)(?![a-z]                                 \\n\\\n      )                                               \\n\\\n      ';\n    Addr_Match.sec_unit_type_unnumbered = '           \\n\\\n      (?<sec_unit_type_2>ba?se?me?n?t                 \\n\\\n        |fro?nt                                       \\n\\\n        |lo?bby                                       \\n\\\n        |lowe?r                                       \\n\\\n        |off?i?ce?                                    \\n\\\n        |pe?n?t?ho?u?s?e?                             \\n\\\n        |rear                                         \\n\\\n        |side                                         \\n\\\n        |uppe?r                                       \\n\\\n      )\\\\b';\n    Addr_Match.sec_unit = '                               \\n\\\n      (?:                               #fix3             \\n\\\n        (?:                             #fix1             \\n\\\n          (?:                                             \\n\\\n            (?:' + Addr_Match.sec_unit_type_numbered + '\\\\W*) \\n\\\n            |(?<sec_unit_type_3>\\\\#)\\\\W*                  \\n\\\n          )                                               \\n\\\n          (?<sec_unit_num_1>[\\\\w-]+)                      \\n\\\n        )                                                 \\n\\\n        |                                                 \\n\\\n        ' + Addr_Match.sec_unit_type_unnumbered + '           \\n\\\n      )';\n    Addr_Match.city_and_state = '                       \\n\\\n      (?:                                               \\n\\\n        (?<city>[^\\\\d,]+?)\\\\W+                          \\n\\\n        (?<state>' + Addr_Match.state + ')                  \\n\\\n      )                                                 \\n\\\n      ';\n    Addr_Match.place = '                                \\n\\\n      (?:' + Addr_Match.city_and_state + '\\\\W*)?            \\n\\\n      (?:' + Addr_Match.zip + ')?                           \\n\\\n      ';\n    Addr_Match.address = XRegExp('                      \\n\\\n      ^                                                 \\n\\\n      [^\\\\w\\\\#]*                                        \\n\\\n      (' + Addr_Match.number + ')\\\\W*                       \\n\\\n      (?:' + Addr_Match.fraction + '\\\\W*)?                  \\n\\\n         ' + Addr_Match.street + '\\\\W+                      \\n\\\n      (?:' + Addr_Match.sec_unit + ')?\\\\W*          #fix2   \\n\\\n         ' + Addr_Match.place + '                           \\n\\\n      \\\\W*$', 'ix');\n    var sep = '(?:\\\\W+|$)'; // no support for \\Z\n\n    Addr_Match.informal_address = XRegExp('                   \\n\\\n      ^                                                       \\n\\\n      \\\\s*                                                    \\n\\\n      (?:' + Addr_Match.sec_unit + sep + ')?                        \\n\\\n      (?:' + Addr_Match.number + ')?\\\\W*                          \\n\\\n      (?:' + Addr_Match.fraction + '\\\\W*)?                        \\n\\\n         ' + Addr_Match.street + sep + '                            \\n\\\n      (?:' + Addr_Match.sec_unit.replace(/_\\d/g, '$&1') + sep + ')?  \\n\\\n      (?:' + Addr_Match.place + ')?                               \\n\\\n      ', 'ix');\n    Addr_Match.po_address = XRegExp('                         \\n\\\n      ^                                                       \\n\\\n      \\\\s*                                                    \\n\\\n      (?:' + Addr_Match.sec_unit.replace(/_\\d/g, '$&1') + sep + ')?  \\n\\\n      (?:' + Addr_Match.place + ')?                               \\n\\\n      ', 'ix');\n    Addr_Match.intersection = XRegExp('                     \\n\\\n      ^\\\\W*                                                 \\n\\\n      ' + Addr_Match.street.replace(/_\\d/g, '1$&') + '\\\\W*?      \\n\\\n      \\\\s+' + Addr_Match.corner + '\\\\s+                         \\n\\\n      ' + Addr_Match.street.replace(/_\\d/g, '2$&') + '\\\\W+     \\n\\\n      ' + Addr_Match.place + '\\\\W*$', 'ix');\n  }\n\n  parser.normalize_address = function (parts) {\n    lazyInit();\n    if (!parts) return null;\n    var parsed = {};\n    Object.keys(parts).forEach(function (k) {\n      if (['input', 'index'].indexOf(k) !== -1 || isFinite(k)) return;\n      var key = isFinite(k.split('_').pop()) ? k.split('_').slice(0, -1).join('_') : k;\n      if (parts[k]) parsed[key] = parts[k].trim().replace(/^\\s+|\\s+$|[^\\w\\s\\-#&]/g, '');\n    });\n    each(Normalize_Map, function (map, key) {\n      if (parsed[key] && map[parsed[key].toLowerCase()]) {\n        parsed[key] = map[parsed[key].toLowerCase()];\n      }\n    });\n    ['type', 'type1', 'type2'].forEach(function (key) {\n      if (key in parsed) parsed[key] = parsed[key].charAt(0).toUpperCase() + parsed[key].slice(1).toLowerCase();\n    });\n\n    if (parsed.city) {\n      parsed.city = XRegExp.replace(parsed.city, XRegExp('^(?<dircode>' + Addr_Match.dircode + ')\\\\s+(?=\\\\S)', 'ix'), function (match) {\n        return capitalize(Direction_Code[match.dircode.toUpperCase()]) + ' ';\n      });\n    }\n\n    return parsed;\n  };\n\n  parser.parseAddress = function (address) {\n    lazyInit();\n    var parts = XRegExp.exec(address, Addr_Match.address);\n    return parser.normalize_address(parts);\n  };\n\n  parser.parseInformalAddress = function (address) {\n    lazyInit();\n    var parts = XRegExp.exec(address, Addr_Match.informal_address);\n    return parser.normalize_address(parts);\n  };\n\n  parser.parsePoAddress = function (address) {\n    lazyInit();\n    var parts = XRegExp.exec(address, Addr_Match.po_address);\n    return parser.normalize_address(parts);\n  };\n\n  parser.parseLocation = function (address) {\n    lazyInit();\n\n    if (XRegExp(Addr_Match.corner, 'xi').test(address)) {\n      return parser.parseIntersection(address);\n    }\n\n    if (XRegExp('^' + Addr_Match.po_box, 'xi').test(address)) {\n      return parser.parsePoAddress(address);\n    }\n\n    return parser.parseAddress(address) || parser.parseInformalAddress(address);\n  };\n\n  parser.parseIntersection = function (address) {\n    lazyInit();\n    var parts = XRegExp.exec(address, Addr_Match.intersection);\n    parts = parser.normalize_address(parts);\n\n    if (parts) {\n      parts.type2 = parts.type2 || '';\n      parts.type1 = parts.type1 || '';\n\n      if (parts.type2 && !parts.type1 || parts.type1 === parts.type2) {\n        var type = parts.type2;\n        type = XRegExp.replace(type, /s\\W*$/, '');\n\n        if (XRegExp('^' + Addr_Match.type + '$', 'ix').test(type)) {\n          parts.type1 = parts.type2 = type;\n        }\n      }\n    }\n\n    return parts;\n  }; // AMD / RequireJS\n\n\n  if (typeof define !== 'undefined' && define.amd) {\n    define([], function () {\n      return parser;\n    });\n  } // Node.js\n  else if (typeof exports !== \"undefined\") {\n      exports.parseIntersection = parser.parseIntersection;\n      exports.parseLocation = parser.parseLocation;\n      exports.parseInformalAddress = parser.parseInformalAddress;\n      exports.parseAddress = parser.parseAddress;\n    } // included directly via <script> tag\n    else {\n        root.addressParser = root.addressParser || parser;\n      }\n})();","map":null,"metadata":{},"sourceType":"script"}