{"version":3,"sources":["Search.js","AgentCard.js","AgentSearch.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","react_default","a","createElement","className","index_es","app","credentials","componentId","dataField","queryFormat","placeholder","onSuggestion","suggestion","label","_source","Name","value","source","onValueSelected","cause","setCall","downShiftProps","defaultIsOpen","initialIsOpen","defaultHighlightedIndex","parser","require","AgentCard","Loader","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCity","bind","assertThisInitialized","parsed","parseLocation","agentObject","address","location","city","state","loading","src","photoURL","alt","height","width","name","material_icons_react_default","icon","size","color","avgRating","reviewCount","bizName","phone","emailInput","href","profileURL","target","React","Component","request","parseString","util","apiKey","AgentSearch","result","dataObject","console","log","Email","setState","email","makeCall","url","concat","that","err","response","body","returnObject","messageCode","error","getAttribute","key","attribute","inspect","replace","specialties","Number","parseFloat","toFixed","finalizeObject","src_Search","react_transition_group","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","src_AgentCard","Links","Link","to","App","BrowserRouter","App_Links","Route","exact","path","render","component","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93309448.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {ReactiveBase, DataSearch} from '@appbaseio/reactivesearch';\n\n\nconst Search = props => \n  <div className=\"searchDiv\">\n    <ReactiveBase\n      // app=\"MovieAppFinal\"\n      app=\"agent-reviews-lawder-2\"\n      // credentials=\"RxIAbH9Jc:6d3a5016-5e9d-448f-bd2b-63c80b401484\"\n      credentials=\"RX8tr5U1J:b020bb52-c479-42f5-840c-0e592c9776b5\"\n    >\n      <DataSearch     \n        className=\"search-bar\"                   \n        componentId=\"mainSearch\"            \n        dataField={[\"Name\"]}                      \n        queryFormat=\"and\"            \n        placeholder=\"Search for your agent\" \n        onSuggestion={(suggestion) => (\n          {\n            label: (<div>{suggestion._source.Name}</div>),\n            value: suggestion._source.Name,\n            source: suggestion._source  // for onValueSelected to work with onSuggestion\n          })\n        }\n        onValueSelected={\n          (value, cause, source) => props.setCall(value, cause, source)\n        }\n        downShiftProps={\n          {\n            defaultIsOpen: true,\n            initialIsOpen: true,\n            defaultHighlightedIndex: 0\n          }\n        }\n      />\n    </ReactiveBase>\n  </div>;\n\n  \n  Search.propTypes = {\n    setCall: PropTypes.func.isRequired,\n  }\n\n\nexport default Search;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MaterialIcon, {colorPalette} from 'material-icons-react';\n\nvar parser = require('parse-address'); \nvar Loader = require('react-loaders').Loader;\n\n\nclass AgentCard extends React.Component {\n  constructor() {\n    super();\n\n    this.getCity = this.getCity.bind(this);\n    // this.state = {\n    //   loading: false\n    // };\n\n  }\n\n  getCity() {\n    let parsed = parser.parseLocation(this.props.agentObject.address);\n    if (parsed == null) {\n      return \"\";\n    }\n    let location = parsed.city + \", \" + parsed.state;\n    if (location == null) {\n      return \"\";\n    }\n    return location;\n  }\n\n  render() {\n    return (\n      <div className=\"agentCard\">\n        {this.props.loading &&\n          <div className=\"loader\"></div>\n        }\n        <div className={this.props.loading ? 'card-left loading' : 'card-left'}>\n          <img src={this.props.agentObject.photoURL} alt=\"Profile pic\" height=\"120\" width=\"120\"></img>\n        </div>\n\n        <div className={this.props.loading ? 'card-right loading' : 'card-right'}>\n\n          <div className=\"card-header\">\n            <h3>{this.props.agentObject.name}</h3>\n            <div className=\"rating\">\n              <MaterialIcon icon=\"star\" size={20} color=\"#F6BD2A\" />\n              <p className=\"rating-avg\">{this.props.agentObject.avgRating}</p>\n              <p className=\"rating-count\">({this.props.agentObject.reviewCount} reviews)</p>\n            </div>\n          </div>\n\n          <div className=\"card-business\">\n            <MaterialIcon icon=\"business\" size={24} color={\"#C4C4C4\"}/>\n            <div className=\"card-location\">\n              <p className=\"location-biz\">{this.props.agentObject.bizName}</p>\n              <p className=\"location-city\">{this.getCity()}</p>\n            </div>\n          </div>\n\n          <div className=\"card-contact\">\n            <div className=\"contact-phone\">\n              <MaterialIcon icon=\"phone\" size={24} color=\"#C4C4C4\" />\n              <p>{this.props.agentObject.phone}</p>              \n            </div>\n            <div className=\"contact-email\">\n              <MaterialIcon icon=\"email\" size={24} color=\"#C4C4C4\" />\n              <p>{this.props.agentObject.emailInput}</p>\n            </div>\n          </div>\n          \n          <div className=\"zillow-link\">\n            <img className=\"zillow-logo\"></img>\n            <a href={this.props.agentObject.profileURL} target=\"_blank\">Full profile on Zillow</a>\n            <div className=\"zillow-icon\"><MaterialIcon icon=\"chevron_right\" color=\"#757575\" size={20} /></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n  AgentCard.propTypes = {\n    result: PropTypes.bool.isRequired,\n    loading: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    agentObject: PropTypes.object\n  }\n\n\nexport default AgentCard;","import React, { Component } from 'react';\n// import './App.css';\n\nimport Search from './Search';\nimport AgentCard from './AgentCard';\n\n// for transition\n// import { CSSTransitionGroup } from 'react-transition-group'; // ES6\nimport {CSSTransitionGroup} from 'react-transition-group'\n\n\n\n// for API request\nconst request = require('request');\nvar parseString = require('xml2js').parseString;\nvar util = require('util');\n\n// yikes\nconst apiKey = 'X1-ZWz1go6ika8u8b_7q4l5';\n\n\n\nclass AgentSearch extends Component {\n\n  state = {\n    result: false,\n    dataObject: null,\n    loading: false,\n    agentObject: {}\n  }\n\n  setCall = (value, cause, source) => {\n    console.log(\"name: \" + source.Name);\n    console.log(\"email: \" + source.Email); // this is the key\n    this.setState({\n        result: true,\n        loading: true,\n        dataObject: {\n          name: source.Name,\n          email: source.Email\n        },\n      },\n      this.makeCall\n    );\n    // when get response, update loading to false and add result object to state\n  }\n\n  makeCall = () => {\n    let email = this.state.dataObject.email;\n    let url = `https://www.zillow.com/webservice/ProReviews.htm?zws-id=${apiKey}&email=${email}`;\n    console.log(url);\n    const that = this;\n\n    request(url, function (err, response, body) {\n      if(err) {\n          console.log('error:', err);\n      } else {\n        let returnObject = {};\n        parseString(body, function(err, result) {\n          returnObject.emailInput = email;\n          let messageCode = result['ProReviews:proreviewresults']['message'][0]['code'][0];\n          // if invalid email\n          if (messageCode == 504) {\n            returnObject.error = \"The email is invalid\";\n          } else if (messageCode == 0) {\n\n            // function to navigate and clean response\n            let getAttribute = key => {\n              let starting = result['ProReviews:proreviewresults']['response'][0]['result'][0]['proInfo'][0];                        \n              if (starting == null) {\n                  return `No profile info`;\n              } else {\n                  let starting2 = result['ProReviews:proreviewresults']['response'][0]['result'][0]['proInfo'][0][key];\n                  if (starting2 == null) {\n                      return `No ${key} info in this profile`;\n                  } else {\n                      let attribute = result['ProReviews:proreviewresults']['response'][0]['result'][0]['proInfo'][0][key][0];\n                      if (attribute == null) {\n                          return `No attribute info for ${key} in this profile`;\n                      } else {\n                          return util.inspect(attribute, false, null).replace(/'/g, \"\");\n                      }\n                  }\n                }\n              }\n            \n            // name \n            returnObject.name = getAttribute('name');\n            // photo URL\n            returnObject.photoURL = getAttribute('photo');\n            // profile URL\n            returnObject.profileURL = getAttribute('profileURL');\n            // business name\n            returnObject.bizName = getAttribute('businessName');\n            // address\n            returnObject.address = getAttribute('address');\n            // phone\n            returnObject.phone = getAttribute('phone');\n            // specialties\n            returnObject.specialties = getAttribute('specialties');\n            // review count\n            returnObject.reviewCount = Number(getAttribute('reviewCount'));\n            // avg rating\n            returnObject.avgRating = parseFloat(getAttribute('avgRating')).toFixed(1);\n          }\n        });\n        that.finalizeObject(returnObject);         \n      }\n    });\n  }\n\n  finalizeObject = (returnObject) => {\n    console.log(this.state.loading);\n    console.log(this.state.result);\n    console.log(returnObject);\n    this.setState({\n      result: true,\n      loading: false,\n      agentObject: returnObject\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"left\">\n          <p className=\"instructions\">Start typing, or try these agents:</p> <br />\n          <p>Abbey Drummond</p> <br/>\n          <p>Christine Bybee</p> <br />\n          <p>Dale Rex</p> <br />\n          <p>Daryl Petersen</p> <br />\n          <p>And many more...</p>\n        </div>\n        <div className=\"right\">\n          <div className=\"header\">\n              Getting to Know You\n          </div>\n\n          <div className=\"task-form\">\n            <div className=\"chat-bubble\">Lawder, are you working with an agent?</div>\n            <Search \n              setCall={this.setCall}\n            />\n            {this.state.result &&\n              <CSSTransitionGroup\n                transitionName=\"example\"\n                transitionAppear={true}\n                transitionAppearTimeout={500}\n                transitionEnter={false}\n                transitionLeave={false}\n              >\n                <AgentCard \n                  result={this.state.result}\n                  loading={this.state.loading}\n                  name={this.state.dataObject.name}\n                  email={this.state.dataObject.email}\n                  agentObject={this.state.agentObject}\n                />\n              </CSSTransitionGroup>\n            }\n            <button className=\"primaryButton\">Continue</button>\n            \n          </div>\n        </div> \n      </div>\n    );\n  }\n}\n\n\nexport default AgentSearch;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\n\nimport AgentSearch from './AgentSearch';\n\n\n// const AgentSearch = () => <h1>Agent Search</h1>\n\nconst Links = () => (\n  <nav>\n    <Link to=\"/\">Home</Link>\n    <Link to=\"/agentSearch\">Agent search</Link>\n  </nav>\n)\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router >\n        <div>\n          <Links />\n          <Route exact path=\"/\" render={() => <h1>Home</h1>} />\n          <Route path=\"/agentSearch\" component={AgentSearch} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}